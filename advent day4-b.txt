import java.io.File
import java.lang.Double.parseDouble

var list:ArrayList<String> = arrayListOf()
var sizes = mutableListOf<Int>(0,0,0,0,0,0,0)
val tests:ArrayList<String> = arrayListOf("byr", "iyr", "eyr", "hgt", "hcl", "ecl", "pid")
var newList = mutableListOf<String>("")

var blarps = 0
fun readFileLineByLineUsingForEachLine(fileName: String)
        = File(fileName).forEachLine { list.add(it.toString()) }

fun main(args: Array<String>) {
    readFileLineByLineUsingForEachLine("src/input.txt")
    var index = 0
    var line = 0

    while (line < list.size) {
        //println(list[line])

        if (list[line] == "") {
            //println(newList[index])
            index++
            newList.add("")
        }
        else
        {
            newList[index] = "${newList[index]} ${list[line]}"
        }
        line++
    }

    for (new in newList)
    {
        //println(new)
    }
    //println(list[line-1])

    //calculateCorrect()
    println(calculateCorrect())

//5007658656
}


fun calculateCorrect(): Long {
    var correct: Long = 0
    var i = 0
    var pass = 0
    var check = 0
    var indexes:MutableList<Int> = MutableList(7){0}

    while (i < newList.size)
    {
        for(j in 0..6)
        {
            indexes[j] = newList[i].indexOf(tests[j])
        }


        if(indexes[0] > -1 && newList[i].substring(indexes[0]+4, indexes[0]+8).toInt() in 1920..2002)
        {
            pass++
            sizes[0]++
            //println(newList[i].substring(indexes[0]+4, indexes[0]+8).toInt())
        }
        if(indexes[1] > -1 && newList[i].substring(indexes[1]+4, indexes[1]+8).toInt() in 2010..2020)
        {
            pass++
            sizes[1]++
            //println(newList[i].substring(indexes[1]+4, indexes[1]+8).toInt())
        }
        if(indexes[2] > -1 && newList[i].substring(indexes[2]+4, indexes[2]+8).toInt() in 2020..2030)
        {
            sizes[2]++
            pass++
            //println(newList[i].substring(indexes[0]+4, indexes[0]+8).toInt())
        }
        if(newList[i].length >= indexes[3]+9 && indexes[3] > -1 && newList[i].substring(indexes[3] + 7, indexes[3] + 9) == "cm" && newList[i].substring(indexes[3] + 4, indexes[3] + 7).toInt() in 150..193) {
            pass++
            sizes[3]++
            //println(newList[i].substring(indexes[3], indexes[3] + 9))
        }
        if(newList[i].length >= indexes[3]+8 && indexes[3] > -1 && newList[i].substring(indexes[3] + 6, indexes[3] + 8) == "in") {
            if (newList[i].substring(indexes[3] + 4, indexes[3] + 6).toInt() in 59..76) {
                pass++
                sizes[3]++
                //println(newList[i].substring(indexes[3], indexes[3] + 8))
            }
        }
        check = 0
        if(newList[i].substring(indexes[4] + 4, indexes[4] + 5) == "#") {
            for (k in 0..5) {
                //println(newList[i].substring(indexes[4] + 5+k, indexes[4]+ 6+k))
                if ("[a-f]".toRegex().containsMatchIn(newList[i].substring(indexes[4] + 5+k, indexes[4]+ 6+k)) ||
                    "[0-9]".toRegex().containsMatchIn(newList[i].substring(indexes[4] + 5+k, indexes[4] + 6+k))) {
                    check++
                    //println(newList[i].substring(indexes[4], indexes[3]+4+9))
                }
                if (check == 6)
                {
                    pass++
                    sizes[4]++
                    //println(newList[i].substring(indexes[4], indexes[4]+11))
                    blarps++
                }
            }
        }

        if(indexes[5] > -1) {
            val c = newList[i].substring(indexes[5] + 4, indexes[5] + 7)
            if (c == "amb" || c == "blu" || c == "brn" || c == "gry" || c == "grn" || c == "hzl" || c == "oth") {
                pass++
                sizes[5]++
                //println(newList[i].substring(indexes[5], indexes[5] + 7))
                //blarps++
            }
        }

        check = 0
        var numeric = true
        if(newList[i].length >= indexes[6]+13) {
            for (r in 0..8) {
                numeric = true
                try {
                    val num = parseDouble(newList[i].substring(indexes[6] + 4 + r, indexes[6] + 5 + r))
                } catch (e: NumberFormatException) {
                    numeric = false
                }

                //println(newList[i].substring(indexes[6] + 4 + r, indexes[6] + 5 + r).toInt())
                if (numeric && newList[i].substring(indexes[6] + 4 + r, indexes[6] + 5 + r).toInt() in 0..9) {
                    check++
                    //println(newList[i].substring(indexes[4], indexes[3]+4+9))
                }
            }
            if(newList[i].length == indexes[6]+13 && check == 9) {
                sizes[6]++
                pass++
                println(newList[i].substring(indexes[6], indexes[6] + 13))
            }
            else if (check == 9 && newList[i].substring(indexes[6] + 4 + 9, indexes[6] + 5 + 9) == " ") {
                sizes[6]++
                pass++
                println(newList[i].substring(indexes[6], indexes[6] + 13))
            }
        }


        if (pass >= 7)
        {
            correct++
        }
        //println("${newList[i]}  ->  ${pass}")
        //println(pass)
        pass = 0
        i++
    }

    println(blarps)
    //println(sizes[0])
    return correct
}
// 146 too low
//153 too high