import java.io.File
import java.lang.Double.parseDouble
import kotlin.reflect.jvm.internal.impl.util.Check

var list:ArrayList<String> = arrayListOf()
var hasGold = mutableListOf<String>()
var stubs = mutableListOf<String>()
var bags = mutableMapOf<String, List<String>>()
var index = 0

fun readFileLineByLineUsingForEachLine(fileName: String) {
    File(fileName).forEachLine { list.add(it.toString()) }
}
fun main(args: Array<String>) {
    readFileLineByLineUsingForEachLine("src/input.txt")
    list.forEach {
        val bag = GetBag(it)
        var children: MutableList<String> = mutableListOf()
        val childs = bag[1].split(", ")
        childs.forEach {
            children.add(it)
        }
        children.forEach {
            if(it[it.length-1] == 's')
            {
                children[children.indexOf(it)] = it.substring(0,it.length-1)
            }
            else {
                children[children.indexOf(it)] = it.substring(0, it.length)
            }
        }

        bags.put(bag[0], children)
    }

    bags.forEach { t, u ->
        if(t == "shiny gold bag") {
            //println("$t    -->    $u")
            println(CheckPath("shiny gold bag", u))
        }
    }
}

fun CheckPath(type: String, children: List<String>?): Long
{
    var multiplier: Long = 0
    var childAmount: Long = 0
    var total: Long = 0

    children!!.forEach {
        //println(it)
        if(it[0].isDigit()) {
            multiplier = Character.getNumericValue(it[0]).toLong()
        }
        else
        {
            multiplier = 1
            return 1
        }

        bags.forEach { t, u ->
            if(t.indexOf(it.substring(2, it.length-1)) > -1 ) {
                if(!u[0][0].isDigit())
                {
                    childAmount = 1
                }
                else {
                    childAmount = CheckPath(t, u) + 1
                }
                total += multiplier * childAmount
            }
        }
        println("$type --> $children = $total")
        println(total)
    }
    return total
}

fun GetBag(input: String): List<String> {
    var data: MutableList<String>
    var type: String = input.substring(0, input.indexOf("contain") - 2)
    var finalPart: String = input.substring(input.indexOf("contain") +8, input.length-1)
    return listOf<String>(type, finalPart)
}